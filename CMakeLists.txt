# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(ZASM_BUILD_TESTS "" OFF)
option(ZASM_BUILD_BENCHMARKS "" OFF)

project(zasm
	LANGUAGES
		CXX
)

# thirdparty
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/thirdparty")
else()
	set(CMAKE_FOLDER thirdparty)
endif()
add_subdirectory(thirdparty)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target zasm_common
set(CMKR_TARGET zasm_common)
set(zasm_common_SOURCES "")

set(CMKR_SOURCES ${zasm_common_SOURCES})
add_library(zasm_common INTERFACE)

if(zasm_common_SOURCES)
	target_sources(zasm_common INTERFACE ${zasm_common_SOURCES})
endif()

add_library(zasm::common ALIAS zasm_common)
if(MSVC) # msvc
	target_compile_options(zasm_common INTERFACE
		"/bigobj"
		"/MP"
		"/W3"
		"/permissive-"
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target zasm
set(CMKR_TARGET zasm)
set(zasm_SOURCES "")

list(APPEND zasm_SOURCES
	"src/zasm/src/decoder/decoder.cpp"
	"src/zasm/src/encoder/encoder.cpp"
	"src/zasm/src/encoder/generator.cpp"
	"src/zasm/src/formatter/formatter.cpp"
	"src/zasm/src/program/data.cpp"
	"src/zasm/src/program/instruction.cpp"
	"src/zasm/src/program/program.cpp"
	"src/zasm/src/program/register.cpp"
	"src/zasm/src/serialization/serializer.cpp"
	"src/zasm/src/x86/x86.assembler.cpp"
	"src/zasm/src/x86/x86.register.cpp"
	"src/zasm/src/zasm.cpp"
	"src/zasm/src/encoder/encoder.context.hpp"
	"src/zasm/src/encoder/generator.hpp"
	"src/zasm/src/program/program.node.hpp"
	"src/zasm/src/program/program.state.hpp"
	"include/zasm/base/mode.hpp"
	"include/zasm/core/bitsize.hpp"
	"include/zasm/core/enumflags.hpp"
	"include/zasm/core/errors.hpp"
	"include/zasm/core/expected.hpp"
	"include/zasm/core/math.hpp"
	"include/zasm/core/objectpool.hpp"
	"include/zasm/core/packed.hpp"
	"include/zasm/core/stringpool.hpp"
	"include/zasm/decoder/decoder.hpp"
	"include/zasm/encoder/encoder.hpp"
	"include/zasm/formatter/formatter.hpp"
	"include/zasm/program/data.hpp"
	"include/zasm/program/embeddedlabel.hpp"
	"include/zasm/program/immediate.hpp"
	"include/zasm/program/instruction.hpp"
	"include/zasm/program/label.hpp"
	"include/zasm/program/labeldata.hpp"
	"include/zasm/program/memory.hpp"
	"include/zasm/program/node.hpp"
	"include/zasm/program/observer.hpp"
	"include/zasm/program/operand.hpp"
	"include/zasm/program/program.hpp"
	"include/zasm/program/register.hpp"
	"include/zasm/program/section.hpp"
	"include/zasm/serialization/serializer.hpp"
	"include/zasm/x86/assembler.hpp"
	"include/zasm/x86/emitter.hpp"
	"include/zasm/x86/instruction.hpp"
	"include/zasm/x86/memory.hpp"
	"include/zasm/x86/register.hpp"
	"include/zasm/x86/x86.hpp"
	"include/zasm/zasm.hpp"
)

list(APPEND zasm_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${zasm_SOURCES})
add_library(zasm STATIC)

if(zasm_SOURCES)
	target_sources(zasm PRIVATE ${zasm_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${zasm_SOURCES})

add_library(zasm::zasm ALIAS zasm)
target_compile_features(zasm PUBLIC
	cxx_std_17
)

target_include_directories(zasm PUBLIC
	include
)

target_link_libraries(zasm PUBLIC
	Zydis
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target testing
if(ZASM_BUILD_TESTS) # tests
	set(CMKR_TARGET testing)
	set(testing_SOURCES "")

	list(APPEND testing_SOURCES
		"src/testing/testing.cpp"
	)

	list(APPEND testing_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${testing_SOURCES})
	add_executable(testing)

	if(testing_SOURCES)
		target_sources(testing PRIVATE ${testing_SOURCES})
	endif()

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT testing)
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${testing_SOURCES})

	target_link_libraries(testing PRIVATE
		zasm::common
		zasm::zasm
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target testdata
if(ZASM_BUILD_TESTS) # tests
	set(CMKR_TARGET testdata)
	set(testdata_SOURCES "")

	set(CMKR_SOURCES ${testdata_SOURCES})
	add_library(testdata INTERFACE)

	if(testdata_SOURCES)
		target_sources(testdata INTERFACE ${testdata_SOURCES})
	endif()

	add_library(zasm::testdata ALIAS testdata)
	target_include_directories(testdata INTERFACE
		"src/testdata"
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target tests
if(ZASM_BUILD_TESTS) # tests
	set(CMKR_TARGET tests)
	set(tests_SOURCES "")

	list(APPEND tests_SOURCES
		"src/tests/main.cpp"
		"src/tests/tests/tests.assembler.cpp"
		"src/tests/tests/tests.decoder.cpp"
		"src/tests/tests/tests.externals.cpp"
		"src/tests/tests/tests.formatter.cpp"
		"src/tests/tests/tests.imports.cpp"
		"src/tests/tests/tests.instruction.cpp"
		"src/tests/tests/tests.instructions.x64.cpp"
		"src/tests/tests/tests.observer.cpp"
		"src/tests/tests/tests.packed.cpp"
		"src/tests/tests/tests.program.cpp"
		"src/tests/tests/tests.registers.cpp"
		"src/tests/tests/tests.relocation.cpp"
		"src/tests/tests/tests.sections.cpp"
		"src/tests/tests/tests.segments.cpp"
		"src/tests/tests/tests.serialization.cpp"
		"src/tests/tests/tests.stringpool.cpp"
		"src/tests/testutils.cpp"
		"src/tests/testutils.hpp"
	)

	list(APPEND tests_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${tests_SOURCES})
	add_executable(tests)

	if(tests_SOURCES)
		target_sources(tests PRIVATE ${tests_SOURCES})
	endif()

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT tests)
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${tests_SOURCES})

	target_link_libraries(tests PRIVATE
		zasm::common
		zasm::zasm
		zasm::testdata
		GTest::gtest
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target benchmarks
if(ZASM_BUILD_TESTS) # tests
	set(CMKR_TARGET benchmarks)
	set(benchmarks_SOURCES "")

	list(APPEND benchmarks_SOURCES
		"src/benchmark/benchmarks/benchmark.assembler.cpp"
		"src/benchmark/benchmarks/benchmark.formatter.cpp"
		"src/benchmark/benchmarks/benchmark.serialization.cpp"
		"src/benchmark/benchmarks/benchmark.stringpool.cpp"
		"src/benchmark/main.cpp"
	)

	list(APPEND benchmarks_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${benchmarks_SOURCES})
	add_executable(benchmarks)

	if(benchmarks_SOURCES)
		target_sources(benchmarks PRIVATE ${benchmarks_SOURCES})
	endif()

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT benchmarks)
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${benchmarks_SOURCES})

	target_link_libraries(benchmarks PRIVATE
		zasm::common
		zasm::zasm
		zasm::testdata
		benchmark::benchmark
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

enable_testing()

if(ZASM_BUILD_TESTS) # tests
	add_test(
		NAME
			tests
		WORKING_DIRECTORY
			"${CMAKE_CURRENT_LIST_DIR}/"
		COMMAND
			"$<TARGET_FILE:tests>"
	)

endif()
